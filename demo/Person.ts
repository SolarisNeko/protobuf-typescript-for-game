/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: Person.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
 import * as pb_1 from "../google-protobuf";
 export class Person extends pb_1.Message {
     #one_of_decls: number[][] = [[3]];
     constructor(data?: any[] | ({
         name?: string;
         id?: number;
     } & (({
         email?: string;
     })))) {
         super();
         pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
         if (!Array.isArray(data) && typeof data == "object") {
             if ("name" in data && data.name != undefined) {
                 this.name = data.name;
             }
             if ("id" in data && data.id != undefined) {
                 this.id = data.id;
             }
             if ("email" in data && data.email != undefined) {
                 this.email = data.email;
             }
         }
     }
     get name() {
         return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
     }
     set name(value: string) {
         pb_1.Message.setField(this, 1, value);
     }
     get id() {
         return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
     }
     set id(value: number) {
         pb_1.Message.setField(this, 2, value);
     }
     get email() {
         return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
     }
     set email(value: string) {
         pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
     }
     get has_email() {
         return pb_1.Message.getField(this, 3) != null;
     }
     get _email() {
         const cases: {
             [index: number]: "none" | "email";
         } = {
             0: "none",
             3: "email"
         };
         return cases[pb_1.Message.computeOneofCase(this, [3])];
     }
     static fromObject(data: {
         name?: string;
         id?: number;
         email?: string;
     }): Person {
         const message = new Person({});
         if (data.name != null) {
             message.name = data.name;
         }
         if (data.id != null) {
             message.id = data.id;
         }
         if (data.email != null) {
             message.email = data.email;
         }
         return message;
     }
     toObject() {
         const data: {
             name?: string;
             id?: number;
             email?: string;
         } = {};
         if (this.name != null) {
             data.name = this.name;
         }
         if (this.id != null) {
             data.id = this.id;
         }
         if (this.email != null) {
             data.email = this.email;
         }
         return data;
     }
     serialize(): Uint8Array;
     serialize(w: pb_1.BinaryWriter): void;
     serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
         const writer = w || new pb_1.BinaryWriter();
         if (this.name.length)
             writer.writeString(1, this.name);
         if (this.id != 0)
             writer.writeInt32(2, this.id);
         if (this.has_email)
             writer.writeString(3, this.email);
         if (!w)
             return writer.getResultBuffer();
     }
     static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Person {
         const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Person();
         while (reader.nextField()) {
             if (reader.isEndGroup())
                 break;
             switch (reader.getFieldNumber()) {
                 case 1:
                     message.name = reader.readString();
                     break;
                 case 2:
                     message.id = reader.readInt32();
                     break;
                 case 3:
                     message.email = reader.readString();
                     break;
                 default: reader.skipField();
             }
         }
         return message;
     }
     serializeBinary(): Uint8Array {
         return this.serialize();
     }
     static deserializeBinary(bytes: Uint8Array): Person {
         return Person.deserialize(bytes);
     }
 }
 